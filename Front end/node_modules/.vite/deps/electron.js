import {
  __require
} from "./chunk-CQXHTUV2.js";

// node_modules/.vite-electron-renderer/electron.mjs
var electron = typeof __require !== "undefined" ? function requireElectron() {
  const avoid_parse_require = __require;
  return avoid_parse_require("electron");
}() : function nodeIntegrationWarn() {
  console.error(`If you need to use "electron" in the Renderer process, make sure that "nodeIntegration" is enabled in the Main process.`);
  return {
    // TODO: polyfill
  };
}();
var _ipcRenderer;
if (typeof document === "undefined") {
  _ipcRenderer = {};
  const keys = [
    "invoke",
    "postMessage",
    "send",
    "sendSync",
    "sendTo",
    "sendToHost",
    // propertype
    "addListener",
    "emit",
    "eventNames",
    "getMaxListeners",
    "listenerCount",
    "listeners",
    "off",
    "on",
    "once",
    "prependListener",
    "prependOnceListener",
    "rawListeners",
    "removeAllListeners",
    "removeListener",
    "setMaxListeners"
  ];
  for (const key of keys) {
    _ipcRenderer[key] = () => {
      throw new Error(
        "ipcRenderer doesn't work in a Web Worker.\nYou can see https://github.com/electron-vite/vite-plugin-electron/issues/69"
      );
    };
  }
} else {
  _ipcRenderer = electron.ipcRenderer;
}
var clipboard = electron.clipboard;
var contextBridge = electron.contextBridge;
var crashReporter = electron.crashReporter;
var ipcRenderer = _ipcRenderer;
var nativeImage = electron.nativeImage;
var shell = electron.shell;
var webFrame = electron.webFrame;
var deprecate = electron.deprecate;
export {
  clipboard,
  contextBridge,
  crashReporter,
  electron as default,
  deprecate,
  ipcRenderer,
  nativeImage,
  shell,
  webFrame
};
//# sourceMappingURL=electron.js.map
