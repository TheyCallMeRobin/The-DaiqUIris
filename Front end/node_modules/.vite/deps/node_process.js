import {
  __require
} from "./chunk-CQXHTUV2.js";

// node_modules/.vite-electron-renderer/process.mjs
var avoid_parse_require = __require;
var _M_ = avoid_parse_require("process");
var version = _M_.version;
var versions = _M_.versions;
var arch = _M_.arch;
var platform = _M_.platform;
var release = _M_.release;
var _rawDebug = _M_._rawDebug;
var moduleLoadList = _M_.moduleLoadList;
var binding = _M_.binding;
var _linkedBinding = _M_._linkedBinding;
var _events = _M_._events;
var _eventsCount = _M_._eventsCount;
var _maxListeners = _M_._maxListeners;
var domain = _M_.domain;
var _exiting = _M_._exiting;
var config = _M_.config;
var dlopen = _M_.dlopen;
var uptime = _M_.uptime;
var _getActiveRequests = _M_._getActiveRequests;
var _getActiveHandles = _M_._getActiveHandles;
var getActiveResourcesInfo = _M_.getActiveResourcesInfo;
var reallyExit = _M_.reallyExit;
var _kill = _M_._kill;
var cpuUsage = _M_.cpuUsage;
var resourceUsage = _M_.resourceUsage;
var memoryUsage = _M_.memoryUsage;
var constrainedMemory = _M_.constrainedMemory;
var kill = _M_.kill;
var exit = _M_.exit;
var hrtime = _M_.hrtime;
var openStdin = _M_.openStdin;
var allowedNodeEnvironmentFlags = _M_.allowedNodeEnvironmentFlags;
var assert = _M_.assert;
var features = _M_.features;
var _fatalException = _M_._fatalException;
var setUncaughtExceptionCaptureCallback = _M_.setUncaughtExceptionCaptureCallback;
var hasUncaughtExceptionCaptureCallback = _M_.hasUncaughtExceptionCaptureCallback;
var emitWarning = _M_.emitWarning;
var nextTick = _M_.nextTick;
var _tickCallback = _M_._tickCallback;
var _debugProcess = _M_._debugProcess;
var _debugEnd = _M_._debugEnd;
var _startProfilerIdleNotifier = _M_._startProfilerIdleNotifier;
var _stopProfilerIdleNotifier = _M_._stopProfilerIdleNotifier;
var stdout = _M_.stdout;
var stdin = _M_.stdin;
var stderr = _M_.stderr;
var abort = _M_.abort;
var umask = _M_.umask;
var chdir = _M_.chdir;
var cwd = _M_.cwd;
var env = _M_.env;
var title = _M_.title;
var argv = _M_.argv;
var execArgv = _M_.execArgv;
var pid = _M_.pid;
var ppid = _M_.ppid;
var execPath = _M_.execPath;
var debugPort = _M_.debugPort;
var argv0 = _M_.argv0;
var exitCode = _M_.exitCode;
var _preload_modules = _M_._preload_modules;
var report = _M_.report;
var setSourceMapsEnabled = _M_.setSourceMapsEnabled;
var keyword_default = _M_.default || _M_;
export {
  _debugEnd,
  _debugProcess,
  _events,
  _eventsCount,
  _exiting,
  _fatalException,
  _getActiveHandles,
  _getActiveRequests,
  _kill,
  _linkedBinding,
  _maxListeners,
  _preload_modules,
  _rawDebug,
  _startProfilerIdleNotifier,
  _stopProfilerIdleNotifier,
  _tickCallback,
  abort,
  allowedNodeEnvironmentFlags,
  arch,
  argv,
  argv0,
  assert,
  binding,
  chdir,
  config,
  constrainedMemory,
  cpuUsage,
  cwd,
  debugPort,
  keyword_default as default,
  dlopen,
  domain,
  emitWarning,
  env,
  execArgv,
  execPath,
  exit,
  exitCode,
  features,
  getActiveResourcesInfo,
  hasUncaughtExceptionCaptureCallback,
  hrtime,
  kill,
  memoryUsage,
  moduleLoadList,
  nextTick,
  openStdin,
  pid,
  platform,
  ppid,
  reallyExit,
  release,
  report,
  resourceUsage,
  setSourceMapsEnabled,
  setUncaughtExceptionCaptureCallback,
  stderr,
  stdin,
  stdout,
  title,
  umask,
  uptime,
  version,
  versions
};
//# sourceMappingURL=node_process.js.map
